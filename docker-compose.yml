version: '2.4'

services:
  traefik:
    isolation: ${TRAEFIK_ISOLATION}
    image: ${TRAEFIK_IMAGE}
    container_name: traefik
    command:
      - "--ping"
      - "--api.insecure=true"
      - "--providers.docker.endpoint=npipe:////./pipe/docker_engine"
      - "--providers.docker.exposedByDefault=false"
      - "--providers.file.directory=C:/etc/traefik/config/dynamic"
      - "--entryPoints.websecure.address=:443"
    ports:
      - "443:443"
      - "8079:8080"
    healthcheck:
      test: ["CMD", "traefik", "healthcheck", "--ping"]
    volumes:
      - source: \\.\pipe\docker_engine
        target: \\.\pipe\docker_engine
        type: npipe
      - ${LOCAL_DATA_PATH}/traefik:C:/etc/traefik
    depends_on:
      - middleware
  
  nodejs:
    image: ${REGISTRY}fruitshop-nodejs:${VERSION:-latest}
    build:
      context: ./docker/build/nodejs
      args:
        PARENT_IMAGE: ${NODEJS_PARENT_IMAGE}
        NODEJS_VERSION: ${NODEJS_VERSION}
    scale: 0

  middleware:
    image: ${REGISTRY}fruitshop-middleware:${VERSION}
    isolation: default
    ports:
      - "30159:80"
    build:
      context: .
      dockerfile: docker/build/middleware/Dockerfile
      args:
        BUILD_IMAGE: mcr.microsoft.com/dotnet/sdk:3.1
        BASE_IMAGE: mcr.microsoft.com/dotnet/aspnet:3.1
        BUILD_CONFIGURATION: ${BUILD_CONFIGURATION}
    environment:
      ASPNETCORE_ENVIRONMENT: ${BUILD_CONFIGURATION}
      ApplicationInsightsSettings_InstrumentationKey: "${ApplicationInsightsSettings_InstrumentationKey}"
      OrderCloudSettings_ApiUrl: "${OrderCloudSettings_ApiUrl}"
      OrderCloudSettings_ClientIDsWithAPIAccess: "${OrderCloudSettings_ClientIDsWithAPIAccess}"
      OrderCloudSettings_IncrementorPrefix: "${OrderCloudSettings_IncrementorPrefix}"
      OrderCloudSettings_MarketplaceID: "${OrderCloudSettings_MarketplaceID}"
      OrderCloudSettings_MarketplaceName: "${OrderCloudSettings_MarketplaceName}"
      OrderCloudSettings_MiddlewareClientID: "${OrderCloudSettings_MiddlewareClientID}"
      OrderCloudSettings_MiddlewareClientSecret: "${OrderCloudSettings_MiddlewareClientSecret}"
      OrderCloudSettings_WebhookHashKey: "${OrderCloudSettings_WebhookHashKey}"
    labels:
       - "traefik.enable=true"
       - "traefik.http.middlewares.force-STS-Header.headers.forceSTSHeader=true"
       - "traefik.http.middlewares.force-STS-Header.headers.stsSeconds=31536000"
       - "traefik.http.routers.apimiddleware-secure.entrypoints=websecure"
       - "traefik.http.routers.apimiddleware-secure.rule=Host(`${API_HOST}`)"
       - "traefik.http.routers.apimiddleware-secure.tls=true"
       - "traefik.http.routers.apimiddleware-secure.middlewares=force-STS-Header"
  buyer:
    image: ${REGISTRY}fruitshop-buyer:${VERSION}
    isolation: default
    environment:
      MIDDLEWARE_URL: http://${API_HOST}
      BUYER_URL: http://${BUYER_HOST}
    build:
      context: .
      dockerfile: docker/build/buyerstore/Dockerfile
      args:
        BASE_IMAGE: ${REGISTRY}fruitshop-nodejs:${VERSION:-latest}
        ROLE: buyerstore
    volumes:
      - .\src\UI\buyerstore:C:\App
    labels:
       - "traefik.enable=true"
       - "traefik.http.middlewares.force-STS-Header.headers.forceSTSHeader=true"
       - "traefik.http.middlewares.force-STS-Header.headers.stsSeconds=31536000"
       - "traefik.http.routers.buyerstore-secure.entrypoints=websecure"
       - "traefik.http.routers.buyerstore-secure.rule=Host(`${BUYER_HOST}`)"
       - "traefik.http.routers.buyerstore-secure.tls=true"
       - "traefik.http.routers.buyerstore-secure.middlewares=force-STS-Header"